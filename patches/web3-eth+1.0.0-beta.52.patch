diff --git a/node_modules/web3-eth/dist/web3-eth.cjs.js b/node_modules/web3-eth/dist/web3-eth.cjs.js
index 45ea749..b016f8d 100644
--- a/node_modules/web3-eth/dist/web3-eth.cjs.js
+++ b/node_modules/web3-eth/dist/web3-eth.cjs.js
@@ -52,9 +52,9 @@ function () {
                 }
                 throw new Error('No privateKey given to the TransactionSigner.');
               case 2:
-                if (privateKey.startsWith('0x')) {
-                  privateKey = privateKey.substring(2);
-                }
+//                if (privateKey.startsWith('0x')) {
+//                  privateKey = privateKey.substring(2);
+//                }
                 ethTx = new EthereumTx(transaction);
                 ethTx.sign(Buffer.from(privateKey, 'hex'));
                 validationResult = ethTx.validate(true);
diff --git a/node_modules/web3-eth/dist/web3-eth.esm.js b/node_modules/web3-eth/dist/web3-eth.esm.js
index 11d4300..ea8dd00 100644
--- a/node_modules/web3-eth/dist/web3-eth.esm.js
+++ b/node_modules/web3-eth/dist/web3-eth.esm.js
@@ -26,9 +26,9 @@ class TransactionSigner {
     if (!privateKey) {
       throw new Error('No privateKey given to the TransactionSigner.');
     }
-    if (privateKey.startsWith('0x')) {
-      privateKey = privateKey.substring(2);
-    }
+//    if (privateKey.startsWith('0x')) {
+//      privateKey = privateKey.substring(2);
+//    }
     const ethTx = new EthereumTx(transaction);
     ethTx.sign(Buffer.from(privateKey, 'hex'));
     const validationResult = ethTx.validate(true);
diff --git a/node_modules/web3-eth/dist/web3-eth.umd.js b/node_modules/web3-eth/dist/web3-eth.umd.js
index 2790833..12e10ba 100644
--- a/node_modules/web3-eth/dist/web3-eth.umd.js
+++ b/node_modules/web3-eth/dist/web3-eth.umd.js
@@ -39,9 +39,9 @@
                     }
                     throw new Error('No privateKey given to the TransactionSigner.');
                   case 2:
-                    if (privateKey.startsWith('0x')) {
-                      privateKey = privateKey.substring(2);
-                    }
+//                    if (privateKey.startsWith('0x')) {
+//                      privateKey = privateKey.substring(2);
+//                    }
                     ethTx = new EthereumTx(transaction);
                     ethTx.sign(Buffer.from(privateKey, 'hex'));
                     validationResult = ethTx.validate(true);
