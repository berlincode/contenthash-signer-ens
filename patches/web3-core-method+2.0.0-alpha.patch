diff --git a/node_modules/web3-core-method/dist/web3-core-method.cjs.js b/node_modules/web3-core-method/dist/web3-core-method.cjs.js
index 38d91e0..5e8b7e3 100644
--- a/node_modules/web3-core-method/dist/web3-core-method.cjs.js
+++ b/node_modules/web3-core-method/dist/web3-core-method.cjs.js
@@ -1064,6 +1064,10 @@ function (_AbstractMethod) {
             return;
           }
           _this2.promiEvent.emit('confirmation', confirmations, _this2.formatters.outputTransactionFormatter(receipt));
+          // ulfi: quick hack to finish promise
+          _this2.promiEvent.removeAllListeners();
+          transactionConfirmationSubscription.unsubscribe();
+          _this2.promiEvent.resolve(_this2.afterExecution(receipt));
         }, function (error) {
           _this2.handleError(error, receipt, confirmations);
         }, function () {
diff --git a/node_modules/web3-core-method/dist/web3-core-method.esm.js b/node_modules/web3-core-method/dist/web3-core-method.esm.js
index 937d208..9ba8ad5 100644
--- a/node_modules/web3-core-method/dist/web3-core-method.esm.js
+++ b/node_modules/web3-core-method/dist/web3-core-method.esm.js
@@ -653,6 +653,10 @@ class AbstractObservedTransactionMethod extends AbstractMethod {
           return;
         }
         this.promiEvent.emit('confirmation', confirmations, this.formatters.outputTransactionFormatter(receipt));
+        // ulfi: quick hack to finish promise
+        this.promiEvent.removeAllListeners();
+        transactionConfirmationSubscription.unsubscribe();
+        this.promiEvent.resolve(this.afterExecution(receipt));
       }, error => {
         this.handleError(error, receipt, confirmations);
       }, () => {
diff --git a/node_modules/web3-core-method/dist/web3-core-method.umd.js b/node_modules/web3-core-method/dist/web3-core-method.umd.js
index 13aa9a8..042a3da 100644
--- a/node_modules/web3-core-method/dist/web3-core-method.umd.js
+++ b/node_modules/web3-core-method/dist/web3-core-method.umd.js
@@ -1062,6 +1062,10 @@
                 return;
               }
               _this2.promiEvent.emit('confirmation', confirmations, _this2.formatters.outputTransactionFormatter(receipt));
+              // ulfi: quick hack to finish promise
+              _this2.promiEvent.removeAllListeners();
+              transactionConfirmationSubscription.unsubscribe();
+              _this2.promiEvent.resolve(_this2.afterExecution(receipt));
             }, function (error) {
               _this2.handleError(error, receipt, confirmations);
             }, function () {
